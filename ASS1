//Ass1 SetA Q1
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main()
{
pid_t pid;
pid = fork();

if(pid == 0)
{
printf("\nI am child process, id=%d\n", getpid());
}
else 
{
printf("\nI am parent process, id=%d\n", getpid());
}
return 0;
}

OUTPUT:
I am parent process, id=6295
I am child process, id=6296


//Ass1 SetA Q2
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main()
{
pid_t pid;
pid = fork();
if (pid == 0)
{
printf("\nI am child process, id=%d\n",getpid());
printf("\nPriority :%d,id=%d\n",nice (-7),getpid());
}
else
{
printf("\nI am parent process, id=%d\n",getpid());
nice(1);
printf("\nPriority :%d,id=%d\n",nice (15),getpid());
} 
return 0;
}

OUTPUT:
I am parent process, id=1444

I am child process, id=1448

Priority :-1,id=1448

Priority :16,id=1444


//Ass1 SetB Q1
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
		
void bubblesort(int arr[30],int n)
{
	int i,j,temp;
	for(i=0;i<n;i++)
	{
		for(j=0;j<n-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp=arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=temp;
			}
		}
	}
}

void insertionsort(int arr[30], int n) 
{  
    int i, j, temp;  
    for (i = 1; i < n; i++) {  
        temp = arr[i];  
        j = i - 1;  
  
        while(j>=0 && temp <= arr[j]) 
        {    
            arr[j+1] = arr[j];     
            j = j-1;    
        }    
        arr[j+1] = temp;    
    }  
}  
     
 int main()
 {
   	int arr[25],arr1[25],n,i,status;
 	printf("\nEnter the no of values in array :");
 	scanf("%d",&n);
 	printf("\nEnter the array elements :");
 	for(i=0;i<n;i++)
    		scanf("%d",&arr[i]);
 	int pid=fork();
  	if(pid==0)
   	{
      	//	sleep(5); //only display parent.....
      		printf("\nchild process\n");
      		printf("child process id=%d\n",getpid());
      		insertionsort(arr,n);
       		printf("\nElements Sorted Using insertionsort:");
     		printf("\n");
       		for(i=0;i<n;i++)
    			printf("%d,",arr[i]);
    		printf("\b");
     		printf("\nparent process id=%d\n",getppid());
     		
       }    
     else
       {
     		printf("\nparent process\n");
     		printf("\nparent process id=%d\n",getppid());
	 	bubblesort(arr,n);	      
		printf("Elements Sorted Using bubblesort:");
     		printf("\n");
      		for(i=0;i<n;i++)
    		printf("%d,",arr[i]);
    		printf("\n\n\n"); 
      } 
   	return 0;
 }  

output:

Enter the no of values in array :5

Enter the array elements :22
45
23
12
11

parent process

parent process id=2246

Elements Sorted Using bubblesort:
child process
11,12,22,23,45,


child process id=2251

Elements Sorted Using insertionsort:
11,12,22,23,45,
parent process id=2247


//Ass SetB Q2
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
int main () 
{
pid_t pid = fork ();
if (pid == 0) 
{
printf ("\nI'm child before sleep %d\n",getpid ());
sleep (3);
printf ("\nI'm child after sleep %d\n", getppid ());
}
else
{
printf ("\nI'm parent id %d\n",getpid ());
exit(0);
}
return 0;
}

OUTPUT:
I'm parent id 22978
I'm child before sleep 22979

I'm child after sleep 1


//Ass1 SetC Q1
//Parent process code:
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<sys/types.h>
#include<unistd.h>
#include<sys/wait.h>
#include<string.h>
int *accept_arr(int n) {
int i;
int * arr = (int *)malloc(sizeof(int)*n);
for(i = 0; i < n; i++)
scanf("%d", arr+i);
return arr;
}
void printarr(int *arr, int n) {
int i;
for(i = 0; i < n; i++)
printf(" %d ", arr[i]);
printf("\n");
}
char ** get_args(int *aar, int n) {
char** args = (char**)malloc(n* sizeof(char));
for (i = 0; i < n; i++)
args[i] = (char*)malloc(25 * sizeof(char));
i = 0;
for(i = 0; i < n; i++) {
sprintf(args[i], "%d", aar[i]);
}
return args;
}
int *i_sort(int *arr, int n) 
{
int i,
j,
temp;
for(i = 1; i < n; i++) {
temp = arr[i];
for(j = i-1; (j >= 0) && (temp < arr[j]); j--)
arr[j+1] = arr[j];
arr[j+1] = temp;
} return arr;
}
int main()
{
int *arr;
int n;
printf("\nEnter n value:");
scanf("%d", &n);
arr = accept_arr(n);
printarr(arr, n);
printf("\nI am parent process , id=%d\n", getpid());
printf("\nSorting array using insertion sort\n");
printarr(i_sort(arr, n), n);
execv("./binary.out", get_args(arr, n));
return 0;
}

// Child process code:
#include<stdio.h>
#include<stdlib.h>
int search(int *arr,int l,int r,int key)
{
int mid;
while(l<=r)
{
mid=(l+r)/2;
if(arr[mid]==key)
return mid;
if(key>arr[mid])
l=mid+1;
else
r=mid-1;
} return -1;
}
int * acceptarr(int n,char *args[])
{
int *arr=(int *)malloc(sizeof(int)*(n));
int i;
for(i=0;i<n;i++)
arr[i]=atoi(args[i]);
return arr;
} 
int main(int argc,char * argv[])
{
int n=argc,index,key;
int *arr;
arr=acceptarr(n,argv);
printf("\nEnter number to search:");
scanf("%d",&key);
index=search(arr,0,n-1,key);
if(index!=-1)
printf("\n%d found at index %d\n",key,index);
else
printf("\n%d not found\n",key);
free(arr);
}

Output:
Enter n value:5
5 1 4 2 3
5 1 4 2 3
I am parent process , id=16187
Sorting array using insertion sort
1 2 3 4 5
Enter number to search:3
3 found at index 2


//Ass1 SetC Q2
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
int main() 
{
pid_t pid;
pid = fork();//makes two process one runs before pid==0 i.e parent and other is child.
if(pid == 0) 
{
printf("\nI am child process, id=%d\n", getpid());
execv("./exec.out",NULL);
}
else
 {
wait (NULL);
printf("\nI am parent process, id=%d\n", getpid());
} 
return 0;
}

Output:
I am child process, id=16674
I am parent process, id=16674
I am child process, id=16675
I am parent process, id=16673






