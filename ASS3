//Ass3 SetA Q1
#include<stdio.h>
#include<string.h>
struct process
{
  char pname[10];
  float bt,at,st,ft,wt,tat;
}p[100];
int n,i;

void input()
{
  printf("\n enter how many processes");
  scanf("%d",&n);
  for(i=0;i<n;i++)
  {
    printf("\n Enter process name");
    scanf("%s",&p[i].pname);
    printf("\n Enter cpu burst time");
    scanf("%f",&p[i].bt);
    printf("\n Enter Arrval Time");
    scanf("%f",&p[i].at);
  }
}

void display()
 {
   printf("\n----------------------------------------------------\n"); 
   printf("\nprocess name\tburst time\tarrival time\n");
   printf("\n----------------------------------------------------\n");  
   for(i=0;i<n;i++)
   {
     printf("\n  %s  \t   %.2f    \t%.2f",p[i].pname,p[i].bt,p[i].at); 
   }
   printf("\n----------------------------------------------------\n");
 }

void display1()
 { 
   float swt=0,awt,stat=0,astat;
   printf("\n----------------------------------------------------\n"); 
   printf("\nprocess name\tburst time\tarrival time\tstart time\twait time\tFinish
            Time\tturn around time\n");
   printf("\n----------------------------------------------------\n");  
   for(i=0;i<n;i++)
   {
     swt+=p[i].wt;
     stat+=p[i].tat;
     printf("\n%s\t%.2f\t%.2f\t%2.f\t%2.f\t%2.f\t%2.f",p[i].pname,p[i].bt,
              p[i].at,p[i].st,p[i].wt,p[i].ft,p[i].tat); 
   }
   printf("\n----------------------------------------------------\n");
  
   printf("\nAverage wait time=%.2f\n",swt/n);
   printf("\nAverage turn around time=%.2f\n",stat/n);
 }

 void sort()
 { 
   int i,j;
   struct process t1,t2;
   for(i=0;i<n;i++)
   {
     for(j=i+1;j<n;j++)
     {
       if(p[i].at>p[j].at)
       {
         t2=p[i];
         p[i]=p[j];
         p[j]=t2;
       }
     }
  }   
   display();
 }

void fcfs()
{
  int s=0;
  sort();
  printf("\nGanttchart\n");
  printf("0|");
  p[0].st=0;
  p[i].ft=0; 
  for(i=0;i<n;i++)
  {
   printf("  %.2f | ",p[i].bt);
   p[i+1].st=p[i].bt+s;
   s+=p[i].bt;
   p[i].wt=p[i].st-p[i].at;
   p[i].ft=p[i].st+p[i].bt;
   p[i].tat=p[i].ft-p[i].at;
  }
}
int main()
{
  input();
  display();
  fcfs();
  display1();
}


//Ass3 SetA Q2
#include<stdio.h>
#include<string.h>
struct process
{
  char pname[10];
  float bt,at,st,ft,wt,tat;
}p[100];
int n,i;
void input()
{
  printf("\n enter how many processes");
  scanf("%d",&n);
  for(i=0;i<n;i++)
  {
    printf("\n Enter process name");
    scanf("%s",&p[i].pname);
    printf("\n Enter cpu burst time");
    scanf("%f",&p[i].bt);
    printf("\n Enter Arrval Time");
    scanf("%f",&p[i].at);
  }
}
void display()
{
   printf("\n----------------------------------------------------\n"); 
   printf("\nprocess name\tburst time\tarrival time\n");
   printf("\n----------------------------------------------------\n");  
   for(i=0;i<n;i++)
   {
     printf("\n  %s          \t   %.2f    \t%.2f",p[i].pname,p[i].bt,p[i].at); 
   }
   printf("\n----------------------------------------------------\n");
}
void display1()
{ 
   float swt=0,awt,stat=0,astat;
   printf("\n----------------------------------------------------\n"); 
   printf("\nprocess name\tburst time\tarrival time\tstart time\twait time
           \tFinish Time\tturn around time\n");
   printf("\n----------------------------------------------------\n");  
   for(i=0;i<n;i++)
   {
     swt+=p[i].wt;
     stat+=p[i].tat;
     printf("\n %s\t%.2f\t%.2f\t%2.f \t%2.f  
             \t%2.ft%2.f",p[i].pname,p[i].bt,p[i].at,p[i].st,p[i].wt,p[i].ft,p[i].tat); 
   }
   printf("\n----------------------------------------------------\n");
   printf("\nAverage wait time=%.2f\n",swt/n);
   printf("\nAverage turn around time=%.2f\n",stat/n);
 }
void sort()
{ 
  int i,j;
  struct process t1,t2;
  for(i=0;i<n;i++)
  {
    for(j=i+1;j<n;j++)
   {  
    if(p[i].bt>=p[j].bt)
    {
        t2=p[i];
        p[i]=p[j];
        p[j]=t2;
    }
   }
 }
 for(i=1;i<n;i++)
 {
   for(j=i+1;j<n;j++)
   {  
     if(p[i].at>p[j].at)
     {
        t2=p[i];
        p[i]=p[j];
        p[j]=t2;
     }
   }
}
display();
}
void nsjf()
{
  int s=0;
  sort();
  printf("\nGanttchart\n");
  printf("0|");
  p[0].st=0;
  p[i].ft=0; 
  for(i=0;i<n;i++)
  {
   printf("  %.2f | ",p[i].bt);
   p[i+1].st=p[i].bt+s;
   s+=p[i].bt;
   p[i].wt=p[i].st-p[i].at;
   p[i].ft=p[i].st+p[i].bt;
   p[i].tat=p[i].ft-p[i].at;
  }
}

 int main()
 {
  input();
  display();
  nsjf();
  display1();
  for(i=0;i<n;i++)
  {
		p[i].bt=rand()%10+1;
		p[i].at=p[i].ft+2;
  }
  display();
  nsjf();
  display1();
}


//Ass3 SetB Q1
#include<stdio.h>
#include<string.h>
struct Input
{
	char pname[10];
	int  bt,at,ct,tbt;
}tab[5];
struct Sequence
{
	int start,end;
	char pname[10];
}seq[100],seq1[20];

int finish,time,n,k,prev;

void getinput()
{
	int i;
	system("clear");
	printf("\nEnter No.of Processes:");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		printf("Process name:");
		scanf("%s",tab[i].pname);
		printf("Burst time:");
		scanf("%d",&tab[i].bt);
		printf("Arrival time:");
		scanf("%d",&tab[i].at);
		tab[i].tbt = tab[i].bt;
	}
}
int arrived()
{
	int i;
	for(i=0;i<n;i++)
		if(tab[i].at<=time && tab[i].tbt!=0)
			return 1;
	return 0;
}
int getmin(int t)
{
	int i,mini,min=99;
	for(i=0;i<n;i++)
		if(tab[i].at<=t && tab[i].tbt!=0 && tab[i].tbt<min)
		{
			min = tab[i].tbt;
			mini = i;
		}
	return mini;
}
void sort()
{
	struct Input t;
	int i,j;
	for(i=0;i<n;i++)
		for(j=0;j<n-i-1;j++)
			if(tab[j].at > tab[j+1].at)
			{
				t = tab[j];
				tab[j] = tab[j+1];
				tab[j+1] = t;
			}
}
void processinput()
{
	int i;
	finish=k=0;
	while(finish!=n)
	{
		if(arrived(time))
		{
			i = getmin(time);
			time++;
			tab[i].tbt--;
			tab[i].ct=time;
			seq[k].start=prev;
			seq[k].end = time;
			strcpy(seq[k++].pname,tab[i].pname);
			prev = time;
			if(tab[i].tbt==0)
			{
				finish++;
			}
		}
		else
		{
			time++;
			seq[k].start=prev;
			seq[k].end = time;
			strcpy(seq[k++].pname,"*");
			prev = time;
		}
	}

}
void printoutput()
{
	int i;
	float AvgTAT=0,AvgWT=0;
	printf("\nProcess\tAT\tBT\tCT\tWT\tTAT");
	for(i=0;i<n;i++)
	{
		printf("\n%s\t%d\t%d\t%d\t%d\t%d",tab[i].pname,tab[i].attab[i].bt,
			tab[i].ct,tab[i].ct-tab[i].at-tab[i].bt,tab[i].ct-tab[i].at);
		AvgTAT += tab[i].ct-tab[i].at;
		AvgWT += tab[i].ct-tab[i].at-tab[i].bt;
	}
	AvgTAT/=n;
	AvgWT/=n;
	printf("\nAverage TAT = %f",AvgTAT);
	printf("\nAverage WT = %f",AvgWT);
}
void ganttchart()
{
	int i,j=1;
	seq1[0] = seq[0];
	for(i=1;i<k;i++)
	{
		if(strcmp(seq1[j-1].pname,seq[i].pname)==0)
			seq1[j-1].end = seq[i].end;
		else
			seq1[j++] = seq[i];
	}
        printf("\n\nGantt chart");
	for(i=0;i<j;i++)
		printf("\n%d\t%s\t%d",seq1[i].start,seq1[i].pname,seq1[i].end);
}
int main()
{
	int i;
 	getinput();
	sort();
	processinput();
	printoutput();
	ganttchart();
	for(i=0;i<n;i++)
	{
		tab[i].tbt = tab[i].bt=rand()%10+1;
		tab[i].at=tab[i].ct+2;
	}
	processinput();
	printoutput();
	ganttchart();
}


//Ass3 SetB Q2
#include<stdio.h>
int main()
{
  int i,j,n,time,sum_wait=0,sum_turnaround=0;
  int smallest,at[10],bt[10],priority[10],remain;
  printf("Enter no of Processes : ");
  scanf("%d",&n);
  remain=n;
  for(i=0;i<n;i++)
  {
    printf("Enter arrival time, burst time and priority for process p%d :",i+1);
    scanf("%d",&at[i]);
    scanf("%d",&bt[i]);
    scanf("%d",&priority[i]);
  }
  priority[9]=11;
  printf("\n\nProcess\t|Turnaround time|waiting time\n");
  for(time=0;remain!=0;)
  {
    smallest=9;
    for(i=0;i<n;i++)
    {
      if(at[i]<=time && priority[i]<priority[smallest] && bt[i]>0)
      {
        smallest=i;
      }
    }
    time+=bt[smallest];
    remain--;
    printf("P[%d]\t|\t%d\t|\t%d\n",smallest+1,time-at[smallest],time-at[smallest]-bt[smallest]);
    sum_wait+=time-at[smallest]-bt[smallest];
    sum_turnaround+=time-at[smallest];
    bt[smallest]=0;
  }
  printf("\nAvg waiting time = %f\n",sum_wait*1.0/n);
  printf("Avg turnaround time = %f",sum_turnaround*1.0/n);
  return 0;
}


//Ass3 SetC Q1
#include<stdio.h>
int main()
{
  int i,j,n,time,sum_wait=0,sum_turnaround=0,smallest;
  int at[10],bt[10],pt[10],rt[10],remain; //rt = remaining Time
  printf("Enter no of Processes : ");
  scanf("%d",&n);
  remain=n;
  for(i=0;i<n;i++)
  {
    printf("Enter arrival time, burst time and priority for process p%d :",i+1);
    scanf("%d",&at[i]);
    scanf("%d",&bt[i]);
    scanf("%d",&pt[i]);
    rt[i]=bt[i];
  }
  pt[9]=11;
  printf("\n\nProcess\t|Turnaround time|waiting time\n");
  for(time=0;remain!=0;time++)
  {
    smallest=9;
    for(i=0;i<n;i++)
    {
      if(at[i]<=time && pt[i]<pt[smallest] && rt[i]>0)
      {
    smallest=i;
      }
    }
    rt[smallest]--;
    if(rt[smallest]==0)
    {
      remain--;
      printf("P[%d]\t|\t%d\t|\t%d\n",smallest+1,time+1-at[smallest],time+1-at[smallest]-bt[smallest]);
      sum_wait+=time+1-at[smallest];
      sum_turnaround+=time+1-at[smallest]-bt[smallest];
    }
  }
  printf("\nAvg waiting time = %f\n",sum_wait*1.0/n);
  printf("Avg turnaround time = %f",sum_turnaround*1.0/n);
  return 0;
}


//Ass3 SetC Q2
#include<stdio.h>
int main()
{
  int i,j,n,time,remain,flag=0,ts;
  int sum_wait=0,sum_turnaround=0,at[10],bt[10],rt[10];
  printf("Enter no of Processes : ");
  scanf("%d",&n);
  remain=n;
  for(i=0;i<n;i++)
  {
    printf("Enter arrival time and burst time for Process P%d :",i+1);
    scanf("%d",&at[i]);
    scanf("%d",&bt[i]);
    rt[i]=bt[i];
  }
  printf("Enter time slice");
  scanf("%d",&ts);
  printf("\n\nProcess\t|Turnaround time|waiting time\n\n");
  for(time=0,i=0;remain!=0;)
  {
    if(rt[i]<=ts && rt[i]>0)
    {
      time+=rt[i];
      rt[i]=0;
      flag=1;
    }
    else if(rt[i]>0)
    {
      rt[i]-=ts;
      time+=ts;
    }
    if(rt[i]==0 && flag==1)
    {
      remain--;
      printf("P[%d]\t|\t%d\t|\t%d\n",i+1,time-at[i],time-at[i]-bt[i]);
      sum_wait+=time-at[i]-bt[i];
      sum_turnaround+=time-at[i];
      flag=0;
    }
    if(i==n-1)
      i=0;
    else if(at[i+1]<=time)
      i++;
    else
      i=0;
  }
  printf("\nAvg sum_wait = %f\n",sum_wait*1.0/n);
  printf("Avg sum_turnaround = %f",sum_turnaround*1.0/n);
  return 0;
}
